
// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `GolferRosterCreatorConnectionString`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Persist Security Info=False;database=MVC_GolfRosterCreator;server=.\sqlexpress;user id=sa;password=**zapped**;`
//     Schema:                 ``
//     Include Views:          `False`

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace Golf_Roster_Creator
{
	public partial class Repo_GolferRosterCreator : Database
	{
		public Repo_GolferRosterCreator() 
			: base("GolferRosterCreatorConnectionString")
		{
			CommonConstruct();
		}

		public Repo_GolferRosterCreator(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			Repo_GolferRosterCreator GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static Repo_GolferRosterCreator GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new Repo_GolferRosterCreator();
        }

		[ThreadStatic] static Repo_GolferRosterCreator _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        
		public class Record<T> where T:new()
		{
			public static Repo_GolferRosterCreator repo { get { return Repo_GolferRosterCreator.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }
			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
			
			private Dictionary<string,bool> ModifiedColumns;
			private void OnLoaded()
			{
				ModifiedColumns = new Dictionary<string,bool>();
			}
			protected void MarkColumnModified(string column_name)
			{
				if (ModifiedColumns!=null)
					ModifiedColumns[column_name]=true;
			}
			public int Update() 
			{ 
				if (ModifiedColumns==null)
					return repo.Update(this); 

				int retv = repo.Update(this, ModifiedColumns.Keys);
				ModifiedColumns.Clear();
				return retv;
			}
			public void Save() 
			{ 
				if (repo.IsNew(this))
					repo.Insert(this);
				else
					Update();
			}
		}
	}
	

    
	[TableName("Courses")]
	[PrimaryKey("CourseID")]
	[ExplicitColumns]
    public partial class Course : Repo_GolferRosterCreator.Record<Course>  
    {
        [Column] 
		public int CourseID 
		{ 
			get
			{
				return _CourseID;
			}
			set
			{
				_CourseID = value;
				MarkColumnModified("CourseID");
			}
		}
		int _CourseID;

        [Column] 
		public string Name 
		{ 
			get
			{
				return _Name;
			}
			set
			{
				_Name = value;
				MarkColumnModified("Name");
			}
		}
		string _Name;

        [Column] 
		public string Phone 
		{ 
			get
			{
				return _Phone;
			}
			set
			{
				_Phone = value;
				MarkColumnModified("Phone");
			}
		}
		string _Phone;

	}
    
	[TableName("Golfers")]
	[PrimaryKey("GolferID")]
	[ExplicitColumns]
    public partial class Golfer : Repo_GolferRosterCreator.Record<Golfer>  
    {
        [Column] 
		public int GolferID 
		{ 
			get
			{
				return _GolferID;
			}
			set
			{
				_GolferID = value;
				MarkColumnModified("GolferID");
			}
		}
		int _GolferID;

        [Column("First")] 
		public string _First 
		{ 
			get
			{
				return __First;
			}
			set
			{
				__First = value;
				MarkColumnModified("First");
			}
		}
		string __First;

        [Column] 
		public string Last 
		{ 
			get
			{
				return _Last;
			}
			set
			{
				_Last = value;
				MarkColumnModified("Last");
			}
		}
		string _Last;

        [Column] 
		public string FullName 
		{ 
			get
			{
				return _FullName;
			}
			set
			{
				_FullName = value;
				MarkColumnModified("FullName");
			}
		}
		string _FullName;

        [Column] 
		public string Email 
		{ 
			get
			{
				return _Email;
			}
			set
			{
				_Email = value;
				MarkColumnModified("Email");
			}
		}
		string _Email;

	}
    
	[TableName("TeeTimes")]
	[PrimaryKey("TeeTimeId")]
	[ExplicitColumns]
    public partial class TeeTime : Repo_GolferRosterCreator.Record<TeeTime>  
    {
        [Column] 
		public int TeeTimeId 
		{ 
			get
			{
				return _TeeTimeId;
			}
			set
			{
				_TeeTimeId = value;
				MarkColumnModified("TeeTimeId");
			}
		}
		int _TeeTimeId;

        [Column("TeeTime")] 
		public string _TeeTime 
		{ 
			get
			{
				return __TeeTime;
			}
			set
			{
				__TeeTime = value;
				MarkColumnModified("TeeTime");
			}
		}
		string __TeeTime;

        [Column] 
		public string Golfer1 
		{ 
			get
			{
				return _Golfer1;
			}
			set
			{
				_Golfer1 = value;
				MarkColumnModified("Golfer1");
			}
		}
		string _Golfer1;

        [Column] 
		public string Golfer2 
		{ 
			get
			{
				return _Golfer2;
			}
			set
			{
				_Golfer2 = value;
				MarkColumnModified("Golfer2");
			}
		}
		string _Golfer2;

        [Column] 
		public string Golfer3 
		{ 
			get
			{
				return _Golfer3;
			}
			set
			{
				_Golfer3 = value;
				MarkColumnModified("Golfer3");
			}
		}
		string _Golfer3;

        [Column] 
		public string Golfer4 
		{ 
			get
			{
				return _Golfer4;
			}
			set
			{
				_Golfer4 = value;
				MarkColumnModified("Golfer4");
			}
		}
		string _Golfer4;

        [Column] 
		public string Golfer5 
		{ 
			get
			{
				return _Golfer5;
			}
			set
			{
				_Golfer5 = value;
				MarkColumnModified("Golfer5");
			}
		}
		string _Golfer5;

        [Column] 
		public string WalkRide1 
		{ 
			get
			{
				return _WalkRide1;
			}
			set
			{
				_WalkRide1 = value;
				MarkColumnModified("WalkRide1");
			}
		}
		string _WalkRide1;

        [Column] 
		public string WalkRide2 
		{ 
			get
			{
				return _WalkRide2;
			}
			set
			{
				_WalkRide2 = value;
				MarkColumnModified("WalkRide2");
			}
		}
		string _WalkRide2;

        [Column] 
		public string WalkRide3 
		{ 
			get
			{
				return _WalkRide3;
			}
			set
			{
				_WalkRide3 = value;
				MarkColumnModified("WalkRide3");
			}
		}
		string _WalkRide3;

        [Column] 
		public string WalkRide4 
		{ 
			get
			{
				return _WalkRide4;
			}
			set
			{
				_WalkRide4 = value;
				MarkColumnModified("WalkRide4");
			}
		}
		string _WalkRide4;

        [Column] 
		public string WalkRide5 
		{ 
			get
			{
				return _WalkRide5;
			}
			set
			{
				_WalkRide5 = value;
				MarkColumnModified("WalkRide5");
			}
		}
		string _WalkRide5;

	}
    
	[TableName("sysdiagrams")]
	[PrimaryKey("diagram_id")]
	[ExplicitColumns]
    public partial class sysdiagram : Repo_GolferRosterCreator.Record<sysdiagram>  
    {
        [Column] 
		public string name 
		{ 
			get
			{
				return _name;
			}
			set
			{
				_name = value;
				MarkColumnModified("name");
			}
		}
		string _name;

        [Column] 
		public int principal_id 
		{ 
			get
			{
				return _principal_id;
			}
			set
			{
				_principal_id = value;
				MarkColumnModified("principal_id");
			}
		}
		int _principal_id;

        [Column] 
		public int diagram_id 
		{ 
			get
			{
				return _diagram_id;
			}
			set
			{
				_diagram_id = value;
				MarkColumnModified("diagram_id");
			}
		}
		int _diagram_id;

        [Column] 
		public int? version 
		{ 
			get
			{
				return _version;
			}
			set
			{
				_version = value;
				MarkColumnModified("version");
			}
		}
		int? _version;

        [Column] 
		public byte[] definition 
		{ 
			get
			{
				return _definition;
			}
			set
			{
				_definition = value;
				MarkColumnModified("definition");
			}
		}
		byte[] _definition;

	}
}


